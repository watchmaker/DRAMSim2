
# Configure
binDir     :=   /home/pkt3c/Simulators/DRAMSim2/bin
libDir     :=   /home/pkt3c/Simulators/DRAMSim2/lib
includeDir :=   /home/pkt3c/Simulators/DRAMSim2/include
srcDir     :=   .

# common prefix variables
libtool         :=  /usr/bin/libtool
installBins		:=	$(libtool) --mode=install /usr/bin/install -s -p -m 755
installDynLibs	:=  $(libtool) --mode=install /usr/bin/install -p -m 755
installDirs 	:=	/usr/bin/install -d
installFiles	:=	/usr/bin/install -p -m 644

COMPILE.cc = $(libtool) --mode=compile $(CXX) $(CXXFLAGS) $(CPPFLAGS) $(TARGET_ARCH) -c
LINK.cc    = $(libtool) --mode=link $(CXX) $(CXXFLAGS) $(CPPFLAGS) $(LDFLAGS) $(TARGET_ARCH)

vpath %.cpp $(srcDir)

# specific to the project
CPPFLAGS    :=  -MMD -DNO_STORAGE -DDEBUG_BUILD -DLOG_OUTPUT
CXXFLAGS    :=  -Wall
OPTFLAGS    :=  -O3

ifdef DEBUG
ifeq ($(DEBUG), 1)
OPTFLAGS= -O0 -g
endif
endif
CXXFLAGS+=$(OPTFLAGS)

EXE_NAME:= DRAMSim
LIB_NAME:= libdramsim.la
includes:= $(wildcard $(srcDir)/*.h)
SRC     := $(filter-out TraceBasedSim.cpp,$(notdir $(wildcard $(srcDir)/*.cpp)))
OBJ     := $(patsubst %.cpp, %.o, $(SRC))

all: $(EXE_NAME) $(LIB_NAME)

install:: $(EXE_NAME)
	$(if $^,$(installDirs) $(DESTDIR)$(binDir))
	$(if $^,$(installBins) $^ $(DESTDIR)$(binDir))

# We have to install dynamically shared libraries as executables
# otherwise rpmbuild find-provides will not detect the library
# and automatically add it to the Provides: field.
install:: $(LIB_NAME)
	$(if $^,$(installDirs) $(DESTDIR)$(libDir))
	$(if $^,$(installDynLibs) $^ $(DESTDIR)$(libDir))

install:: $(includes)
	$(if $^,$(installDirs) $(DESTDIR)$(includeDir))
	$(if $^, $(installFiles) $^ $(DESTDIR)$(includeDir))

#   $@ target name, $^ target deps, $< matched pattern
$(EXE_NAME): TraceBasedSim.o $(LIB_NAME)
	$(LINK.cc) $(^:.o=.lo) $(LOADLIBES) $(LDLIBS) -o $@
	@echo "Built $@ successfully"

$(LIB_NAME): LDFLAGS += -rpath $(libDir)

$(LIB_NAME): $(OBJ)

clean:
	-rm -f $(EXE_NAME) $(LIB_NAME) *.o *.lo *.d .libs/*

%.la:
	$(LINK.cc) $(^:.o=.lo) $(LOADLIBES) $(LDLIBS) -o $@
	@echo "Built $@ successfully"

#include the autogenerated dependency files for each .o file
deps := $(OBJ:.o=.d) $(patsubst %.o, .libs/%.d,$(OBJ))

-include $(deps)
